// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  phone       String?   @unique
  address     String?
  password    String
  orders      Order[]
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())   
  updatedUt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Product {
  id             String       @id @default(uuid())
  name           String
  description    String
  price          Float
  stock          Int
  size           String[]
  brand          String
  type           String
  mainImageUrl  String?   // URL of the main image
  secondaryImages String[] // URLs of secondary images
  ratings        Rating[]
  orderItems     OrderItem[]
  createdAt      DateTime  @default(now())
}


model Order {
  id          String        @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  orderItems  OrderItem[]
  totalAmount Float
  status      String     // e.g., 'Pending', 'Completed', 'Cancelled'
  payment     Payment?
  createdAt   DateTime   @default(now())
}

model OrderItem {
  id        String       @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Payment {
  id        String       @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String       @unique
  amount    Float
  method    String    // e.g., 'Credit Card', 'PayPal', etc.
  status    String    // e.g., 'Paid', 'Refunded'
  createdAt DateTime  @default(now())
}

model Rating {
  id        String       @id @default(uuid())
  rating    Int       // e.g., 1-5 star rating
  comment   String?
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime  @default(now())
}